# This is a basic workflow to help you get started with Actions

name: Dev Deployment
env:
  SERVER: colis-dev
  DEPLOY_NAME: c3madmin-web
  COMMIT_FILTER: DEPLOY
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch  
  push:
#    branches: [ master ]
    paths-ignore:
    #- '.github/**'
    - 'README.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
       
  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      isdeploy: ${{steps.check.outputs.isdeploy}}
      branch: ${{steps.check.outputs.branch}}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - id: check
        name: check is Deploy        
        run: | 
          echo $NEXT_PUBLIC_API_URL
          #Set branch name
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
          # Get last commit message
          readonly local last_commit_log="${{github.event.head_commit.message}}"
          echo "last commit log: $last_commit_log"

          readonly local result=$(echo "$last_commit_log" | grep -E "^${COMMIT_FILTER}" )
          echo "search result: $result"

          if [ "$result" == "" ]; then
            echo "not a DEPLOY command"
            echo "::set-output name=isdeploy::false"
          else
            echo "the last commit log contains \"$COMMIT_FILTER\", start building"            
            echo "::set-output name=isdeploy::true"
          fi

  build:
    #if: "true" 
    if: ${{ contains(needs.check.outputs.isdeploy, 'true') }}
    #if: ${{needs.check.outputs.isdeploy}} == 'true'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: check
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a next build for project
      - name: Run nextjs build
        run: |
          #if [ "${{needs.check.outputs.isdeploy}}" == "true" ]; then
            npm install
            npm run build
            echo "====== Docker build ========"
            echo ${{ secrets.DOCKER_TOKEN }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin 
            docker build -t c3madmin_web .
            docker tag c3madmin_web tidusant/c3madmin_web
            docker push tidusant/c3madmin_web
          #else
          #  echo "not a DEPLOY command, skip"
          #fi
  deploy:
    if: ${{ contains(needs.check.outputs.isdeploy, 'true') }}
    # The type of runner that the job will run on
    runs-on: self-hosted
    needs: [check,build]
    steps:
    - name: Kubernetes deploy
      run: |
        echo "https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${{needs.check.outputs.branch}}/devdeploy.yml"
        echo "kubectl -n ${SERVER} rollout restart deploy ${DEPLOY_NAME}"
        sudo kubectl apply -f https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${{needs.check.outputs.branch}}/devdeploy.yml
        #force pull latest image
        sudo kubectl -n ${SERVER} rollout restart deploy ${DEPLOY_NAME}
